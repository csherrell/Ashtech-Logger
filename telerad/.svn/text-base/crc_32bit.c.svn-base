#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#ifndef LAAS_H
#include "../laas.h"
#endif

#ifndef CRC_32_BIT_H
#include "crc_32bit.h"
#endif


static unsigned long  crc_table_reflected[256] =
{
     0x00000000L, 0x999A0002L, 0x98310507L, 0x01AB0505L,
     0x9B670F0DL, 0x02FD0F0FL, 0x03560A0AL, 0x9ACC0A08L,
     0x9DCB1B19L, 0x04511B1BL, 0x05FA1E1EL, 0x9C601E1CL,
     0x06AC1414L, 0x9F361416L, 0x9E9D1113L, 0x07071111L,
     0x90933331L, 0x09093333L, 0x08A23636L, 0x91383634L,
     0x0BF43C3CL, 0x926E3C3EL, 0x93C5393BL, 0x0A5F3939L,
     0x0D582828L, 0x94C2282AL, 0x95692D2FL, 0x0CF32D2DL,
     0x963F2725L, 0x0FA52727L, 0x0E0E2222L, 0x97942220L,
     0x8A236361L, 0x13B96363L, 0x12126666L, 0x8B886664L,
     0x11446C6CL, 0x88DE6C6EL, 0x8975696BL, 0x10EF6969L,
     0x17E87878L, 0x8E72787AL, 0x8FD97D7FL, 0x16437D7DL,
     0x8C8F7775L, 0x15157777L, 0x14BE7272L, 0x8D247270L,
     0x1AB05050L, 0x832A5052L, 0x82815557L, 0x1B1B5555L,
     0x81D75F5DL, 0x184D5F5FL, 0x19E65A5AL, 0x807C5A58L,
     0x877B4B49L, 0x1EE14B4BL, 0x1F4A4E4EL, 0x86D04E4CL,
     0x1C1C4444L, 0x85864446L, 0x842D4143L, 0x1DB74141L,
     0xBF43C3C1L, 0x26D9C3C3L, 0x2772C6C6L, 0xBEE8C6C4L,
     0x2424CCCCL, 0xBDBECCCEL, 0xBC15C9CBL, 0x258FC9C9L,
     0x2288D8D8L, 0xBB12D8DAL, 0xBAB9DDDFL, 0x2323DDDDL,
     0xB9EFD7D5L, 0x2075D7D7L, 0x21DED2D2L, 0xB844D2D0L,
     0x2FD0F0F0L, 0xB64AF0F2L, 0xB7E1F5F7L, 0x2E7BF5F5L,
     0xB4B7FFFDL, 0x2D2DFFFFL, 0x2C86FAFAL, 0xB51CFAF8L,
     0xB21BEBE9L, 0x2B81EBEBL, 0x2A2AEEEEL, 0xB3B0EEECL,
     0x297CE4E4L, 0xB0E6E4E6L, 0xB14DE1E3L, 0x28D7E1E1L,
     0x3560A0A0L, 0xACFAA0A2L, 0xAD51A5A7L, 0x34CBA5A5L,
     0xAE07AFADL, 0x379DAFAFL, 0x3636AAAAL, 0xAFACAAA8L,
     0xA8ABBBB9L, 0x3131BBBBL, 0x309ABEBEL, 0xA900BEBCL,
     0x33CCB4B4L, 0xAA56B4B6L, 0xABFDB1B3L, 0x3267B1B1L,
     0xA5F39391L, 0x3C699393L, 0x3DC29696L, 0xA4589694L,
     0x3E949C9CL, 0xA70E9C9EL, 0xA6A5999BL, 0x3F3F9999L,
     0x38388888L, 0xA1A2888AL, 0xA0098D8FL, 0x39938D8DL,
     0xA35F8785L, 0x3AC58787L, 0x3B6E8282L, 0xA2F48280L,
     0xD5828281L, 0x4C188283L, 0x4DB38786L, 0xD4298784L,
     0x4EE58D8CL, 0xD77F8D8EL, 0xD6D4888BL, 0x4F4E8889L,
     0x48499998L, 0xD1D3999AL, 0xD0789C9FL, 0x49E29C9DL,
     0xD32E9695L, 0x4AB49697L, 0x4B1F9392L, 0xD2859390L,
     0x4511B1B0L, 0xDC8BB1B2L, 0xDD20B4B7L, 0x44BAB4B5L,
     0xDE76BEBDL, 0x47ECBEBFL, 0x4647BBBAL, 0xDFDDBBB8L,
     0xD8DAAAA9L, 0x4140AAABL, 0x40EBAFAEL, 0xD971AFACL,
     0x43BDA5A4L, 0xDA27A5A6L, 0xDB8CA0A3L, 0x4216A0A1L,
     0x5FA1E1E0L, 0xC63BE1E2L, 0xC790E4E7L, 0x5E0AE4E5L,
     0xC4C6EEEDL, 0x5D5CEEEFL, 0x5CF7EBEAL, 0xC56DEBE8L,
     0xC26AFAF9L, 0x5BF0FAFBL, 0x5A5BFFFEL, 0xC3C1FFFCL,
     0x590DF5F4L, 0xC097F5F6L, 0xC13CF0F3L, 0x58A6F0F1L,
     0xCF32D2D1L, 0x56A8D2D3L, 0x5703D7D6L, 0xCE99D7D4L,
     0x5455DDDCL, 0xCDCFDDDEL, 0xCC64D8DBL, 0x55FED8D9L,
     0x52F9C9C8L, 0xCB63C9CAL, 0xCAC8CCCFL, 0x5352CCCDL,
     0xC99EC6C5L, 0x5004C6C7L, 0x51AFC3C2L, 0xC835C3C0L,
     0x6AC14140L, 0xF35B4142L, 0xF2F04447L, 0x6B6A4445L,
     0xF1A64E4DL, 0x683C4E4FL, 0x69974B4AL, 0xF00D4B48L,
     0xF70A5A59L, 0x6E905A5BL, 0x6F3B5F5EL, 0xF6A15F5CL,
     0x6C6D5554L, 0xF5F75556L, 0xF45C5053L, 0x6DC65051L,
     0xFA527271L, 0x63C87273L, 0x62637776L, 0xFBF97774L,
     0x61357D7CL, 0xF8AF7D7EL, 0xF904787BL, 0x609E7879L,
     0x67996968L, 0xFE03696AL, 0xFFA86C6FL, 0x66326C6DL,
     0xFCFE6665L, 0x65646667L, 0x64CF6362L, 0xFD556360L,
     0xE0E22221L, 0x79782223L, 0x78D32726L, 0xE1492724L,
     0x7B852D2CL, 0xE21F2D2EL, 0xE3B4282BL, 0x7A2E2829L,
     0x7D293938L, 0xE4B3393AL, 0xE5183C3FL, 0x7C823C3DL,
     0xE64E3635L, 0x7FD43637L, 0x7E7F3332L, 0xE7E53330L,
     0x70711110L, 0xE9EB1112L, 0xE8401417L, 0x71DA1415L,
     0xEB161E1DL, 0x728C1E1FL, 0x73271B1AL, 0xEABD1B18L,
     0xEDBA0A09L, 0x74200A0BL, 0x758B0F0EL, 0xEC110F0CL,
     0x76DD0504L, 0xEF470506L, 0xEEEC0003L, 0x77760001L
};

unsigned long
calculate_crc_32bit(unsigned char *ch_ptr, int length)
{

     unsigned long reg = 0;

     while(length--)
          reg = (reg>>8) ^ crc_table_reflected[((reg & 0x000000FF) ^ *ch_ptr++)];

     if(reg)
          return false;
     else
          return true;
}

unsigned long
generate_crc_32bit(unsigned char *ch_ptr, int length)
{

     unsigned long reg = 0;

     while(length--)
          reg = (reg>>8) ^ crc_table_reflected[((reg & 0x000000FF) ^ *ch_ptr++)];

     return reg;
}

