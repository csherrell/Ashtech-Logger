#include <stdio.h>
#include <string.h>
#include <math.h>
#include "../mathematical_constants.h"
#include "../laas.h"
#include "../gps.h"
#include "../satellite_position.h"
#include "../ashtech/ashtech.h"

#define SNR_Min  0
#define PRsc_Max 100 /* meters */
#define N_Limit  10
#define Phase_Change_Max 0.1  /* 10% phase change */

const bool SNR_Valid = true;
static const long nominal_carrier_frequency =  1575420000;

struct str_mca_pr
{
     int N;
     double prs;
     double snr;
     double phase;
};

double PRsc_Limit = 100;

void Calc_PRsc(struct str_ashtech_snv *snv,
               struct str_satellite_position *satloc,
               struct str_location *antloc,
               struct str_ashtech_mca_data *mca_new,
               struct str_mca_pr *mca,
               double *PRsc)
{
     double Phase_diff = 0;
     double range = 0;
     double PRsFinal = 0;
     double delta_t = 0;
     bool sector_mask = false;
     /* Calculate PRs */
     if(SNR_Valid)     
     {
          if((mca->prs != 0) && (mca->snr != 0))
          {
               mca->N = (mca->N <= 200) ? mca->N + 1 : 200;
               Phase_diff = fabs(mca_new->full_phase - mca->phase);
               if(((mca_new->full_phase - mca->phase) / mca->phase) <= 0.1)
               {
                    mca->prs = (
                                 (mca_new->raw_range / (double) mca->N) +
                                    (mca->prs + 
                                      (Phase_diff/nominal_carrier_frequency) * 
                                      ((double)(mca->N - 1) / (double) mca->N)
                                    )
                              );
               } else {
                    mca->prs = mca_new->raw_range;
                    mca->N = 1;
               }
          } else {
               mca->prs = mca_new->raw_range;
               mca->N = 1;
          }
     } else {
          memset(mca, 0x00, sizeof(struct str_mca_pr));
     }

     /* Calculate PRsc */
     if(mca->snr != 0 && SNR_Valid == true && 
        snv->valid == true && snv->checksum != 0)
     {
          if(mca->N == 200 && satloc->elevation >= 5.0 && sector_mask == false)
          {
               /* Calculate the range */
               /* the range was calculated with the position solution */
               range = get_satellite_range(satloc,antloc);
               delta_t = ((satloc->time_received.gps.rcvtime - range/C) - snv->toc);
               PRsFinal = C * (mca->prs + snv->af0 + (snv->af1 * delta_t) + (snv->af2 * pow(delta_t,2)) - snv->tgd + satloc->delta_tr);
               /* ^- Need to add SNV.DeltaTR */
               (*PRsc) = range - PRsFinal;
               if(fabs((*PRsc)) > PRsc_Limit) 
               {
                    (*PRsc) = 0;
               }
          } else { (*PRsc) = 0; }
     } else { (*PRsc) = 0; }
}

int
rs_count(double d_array[])
{
     int i = 0;
     int count = 0;
     for(i=0;i<NUMBER_OF_GPS_SATELLITES;i++)
     {
          count = (d_array[i] != 0) ? count + 1 : count;
     }
     return count;
}

int
Select_RS(double PRsc_1[], int PRsc_1_i, double PRsc_2[], int PRsc_2_i, int Active)
{
     int num_PRsc_1 = rs_count(PRsc_1);
     int num_PRsc_2 = rs_count(PRsc_2);
     if(num_PRsc_1 == num_PRsc_2)
     {
          return Active;
     } else {
          if(num_PRsc_1 > num_PRsc_2) 
          {
              return PRsc_1_i;
          } else {
              return PRsc_2_i;
          }
     }
}

void test()
{
     struct str_ashtech_snv snv;
     struct str_location antenna;
     struct str_satellite_position satellite;
     struct str_ashtech_mca_data mca_in;
     struct str_mca_pr mca_pr;
     double PRscArray[MAX_NUMBER_OF_REFERENCE_RECEIVERS][NUMBER_OF_GPS_SATELLITES];
     int Active[MAX_NUMBER_OF_REFERENCE_STATIONS];
     Calc_PRsc(&snv, &satellite, &antenna, &mca_in, &mca_pr, &PRscArray[0][0]);
     Active[0] = Select_RS(PRscArray[0], 0, PRscArray[1], 1, Active[0]);
}
